package generics;

public class Algorithm {
	
/*<자료구조와 알고리즘>
 * 
 * 1.배열(Array) :같은 형의 데이터 타입을 메모리에 저장하는 선형적 자료구조,논리적 구조와 물리적 구조가 동일
 * fixed - length ; 인덱스 연산을 할수 있음. input , output , delete n개에 dependent 하다.
 * 배열의 요소가 계속 변화한다: 배열을 쓰는것이 좋은 방법은 아님.
 * 2.ArrayList = > 객체 배열을 구현해 놓은것.
 * 3.LinkedList => 배열의 단점 보완. 일단 몇개짜리를 선언하지 않음. 물리적인 위치 와 논리적인 위치가 같지 않음.
 * Linked List
 * Stack =>push() , pop() //LIFO 가장 최근의 정보를 참조할때.peek -> get이랑 비슷. 
 * Queue =>front/rear inqueue, dequeue FIFO 선착순.
 * Arraylist add > 맨뒤로 들어감. remove 에서 0번째를 꺼내면 queue처럼 꺼내는것.
 * remove에서 size -1 하면 stack처럼 꺼내는것.
 * Tree =>Binary Search Tree?
 * 자료의 검색
 * 계층이 있는 자료구조.자식노드가 최대두개인 tree를 Binary tree라고함. left child - >나보다 작은 값
 * right child ->나보다 큰 값. 중복을 허용하지 않음. key 값이 동일할 수 없음.
 * Hash
 * Collection 인터페이스 하위에 List 인터페이스, Set 인터페이스들이 있음
 * collection =>단일 객체들 관리
 * List 인터페이스 밑에 ArrayList, LinkedList 클래스 Set인터페이스밑에 hahset ,treeset 클래스
 * list / set 차이
 * List: 선형자료구조 (쭉 일렬로 되어있는것. 앞뒤의 관계가 1:1) 배열, linked list, stack queue. 
 * Set: 하나씩 데이터를 관리는 하는데 집합의 개념, 요소가 중복되지 않음.유일한 데이터를 많이 관리함. 
 * set 인터페이스를 구현한 클래스들의 특징 : 순서는 상관없음. hasheset  treeset
 * 
 * Collection 인터페이스
 * 하나의 객체를 관리하기 위한 메서드가 정의된 인터페이스
 * 하위에 List 와 Set 인터페이스가 잇음
 * List 인터페이스 >순서가 있는 자료관리,중복허용,이 인터페이스를 구현한 클래스는 Arraylist,LinkedList,
 * Stack , Queue 등이 있음
 * Set 인터페이스>순서가 정해져 있지 않음.중복을 허용하지 않음. 이 인터페이스를 구현한 클래스는 HashSet,TreeSet 등이 있음.
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 */

}
